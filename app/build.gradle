apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

def versionMajor = 1
def versionMinor = 2
def versionPatch = 0

def checkGoogleServices(variant) {
    def target = project.file("src/" + variant + "/google-services.json")
    def source = project.file("src/" + variant + "/google-services.json.mock")
    if (!target.exists()) {
        System.out.println("using mock google-services.json")
        target << source.bytes
    }
}

checkGoogleServices("prod")
checkGoogleServices("preprod")

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "fr.paug.androidmakers"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch * 10
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "YOUTUBE_API_KEY", "\"" + System.getProperty("androidMakersYouTubeApiKey", "dummyAPIKey") + "\""
    }

    flavorDimensions 'environment'

    productFlavors {
        prod {
            dimension 'environment'
        }

        preprod {
            dimension 'environment'
            applicationIdSuffix ".preprod"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Rename output apk (Just for manual signing)
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def formattedDate = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def newName = output.outputFile.name
                    newName = newName.replace("app", "AndroidMakers")
                    newName = newName.replace("-release", "-release-" + versionName + "-" + versionCode + "-" + formattedDate)
                    outputFileName = newName
                }
            }
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.emoji:emoji:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Firebase
    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation 'com.google.firebase:firebase-messaging:17.4.0'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'

    // Firestore
    implementation 'com.google.firebase:firebase-firestore:18.1.0'

    // Image management
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Used for tags
    implementation 'org.apmem.tools:layouts:1.10@aar'

    // For Video preview
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
}

apply plugin: 'com.google.gms.google-services'